{"version":3,"sources":["components/square.js","components/board.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","src","element","style","display","Board","renderRows","squares","totalSquares","width","height","state","marioLocation","Math","floor","gameInitialized","moves","yMoves","xMoves","lastMove","setTimeout","checkForEnemies","i","this","direction","newSquares","slice","setState","moveY","moveX","marioLoc","marioRange","x","range","enemyLocations","distance","abs","getMarioRange","numberInRange","enemies","filter","square","length","alert","decideMove","map","enemy","value","key","displayElement","handleClick","board","rows","squareNumber","j","push","renderSquare","luckySquares","sqrt","random","includes","renderBoard","React","Component","Game","validateInput","input","dimension","output","parseInt","Number","isNaN","valid","msg","prompt","container","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb92b9e6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Square = (props) => {\n  return (\n    <button className=\"square\" onClick={() => props.onClick()}>\n      <img src={props.element} style={{ display: props.display }} />\n    </button>\n  );\n};\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./square\";\n\nexport default class Board extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.totalSquares = this.props.width * this.props.height;\n    this.state = {\n      squares: [],\n      marioLocation: (this.props.width) * Math.floor(this.props.height/2) + Math.floor(this.props.width/2),\n      gameInitialized: false,\n      moves: 0,\n      yMoves: 0,\n      xMoves: 0,\n      lastMove: '+y'\n    };\n  }\n\n  componentDidUpdate() {\n    setTimeout(() => {\n      this.checkForEnemies();\n    }, 100);\n  }\n\n  handleClick(i) {\n    if (i === this.state.marioLocation) this.checkForEnemies();\n  }\n\n  moveY(direction) {\n    if (\n      direction === '+'\n      && (this.state.marioLocation + 1 - this.props.height) > 0\n    ) {\n      let newSquares = this.state.squares.slice();\n      newSquares[this.state.marioLocation] = {\n        element: '', display: 'none'\n      };\n      newSquares[this.state.marioLocation - this.props.height] = {\n        element: 'mario1.png', display: 'block'\n      };\n\n      this.setState(\n        {\n          gameInitialized: true,\n          marioLocation: this.state.marioLocation - this.props.height, squares: newSquares,\n          moves: this.state.moves + 1,\n          yMoves: this.state.yMoves + 1,\n          xMoves: 0,\n          lastMove: '+y'\n        }\n      );\n    } else if (\n      direction === '-' &&\n      (this.state.marioLocation + this.props.height) < this.totalSquares\n    ) {\n      let newSquares = this.state.squares.slice();\n      newSquares[this.state.marioLocation] = {\n        element: '', display: 'none'\n      };\n      newSquares[this.state.marioLocation + this.props.height] = {\n        element: 'mario1.png', display: 'block'\n      };\n      this.setState(\n        {\n          gameInitialized: true,\n          marioLocation: this.state.marioLocation + this.props.height,\n          squares: newSquares,\n          moves: this.state.moves + 1, yMoves: this.state.yMoves + 1, xMoves: 0, lastMove: '-y'\n        }\n      );\n    } else {\n      this.state.lastMove === '+y'\n        ? this.moveY('-')\n        : this.state.lastMove === '-y'\n        ? this.moveY('+')\n        : this.setState({ lastMove: '+y' });\n    }\n  }\n\n  moveX(direction) {\n    if (\n      direction === '+'\n      && (this.state.marioLocation + 2) % this.props.width !== 1\n      && (this.state.marioLocation + 1) < this.totalSquares\n    ) {\n      let newSquares = this.state.squares.slice();\n      newSquares[this.state.marioLocation] = {\n        element: '', display: 'none'\n      };\n      newSquares[this.state.marioLocation + 1] = {\n        element: 'mario1.png', display: 'block'\n      };\n      this.setState(\n        {\n          gameInitialized: true,\n          marioLocation: this.state.marioLocation + 1,\n          squares: newSquares,\n          moves: this.state.moves + 1,\n          xMoves: this.state.xMoves + 1,\n          yMoves: 0,\n          lastMove: '+x'\n        }\n      );\n    } else if (\n      direction === '-'\n      && (this.state.marioLocation) % this.props.width !== 0\n      && (this.state.marioLocation - 1) >= 0\n    ) {\n      let newSquares = this.state.squares.slice();\n      newSquares[this.state.marioLocation] = {\n        element: '', display: 'none'\n      };\n      newSquares[this.state.marioLocation - 1] = {\n        element: 'mario1.png', display: 'block'\n      };\n      this.setState(\n        {\n          gameInitialized: true,\n          marioLocation: this.state.marioLocation - 1,\n          squares: newSquares,\n          moves: this.state.moves + 1,\n          xMoves: this.state.xMoves + 1,\n          yMoves: 0,\n          lastMove: '-x'\n        }\n      );\n    } else {\n      this.state.lastMove === '+x'\n        ? this.moveX('-')\n        : this.state.lastMove === '-x'\n        ? this.moveX('+')\n        : this.setState({ lastMove: '+x' });\n    }\n  }\n\n  getMarioRange() {\n    let marioLoc = this.state.marioLocation;\n    let marioRange = [];\n    for (let i = 0; i < this.props.height; i++) {\n      if (\n        marioLoc >= (i * this.props.width)\n        && marioLoc < (i * this.props.width) + this.props.width\n      ) {\n        marioRange = [\n          (i * this.props.width),\n          (i * this.props.width) + this.props.width\n        ];\n      }\n\n    }\n    return marioRange\n  }\n\n  numberInRange(x, range) {\n    return x >= range[0] && x < range[1];\n  }\n\n  decideMove(enemyLocations) {\n    let distance = Math.abs(\n      enemyLocations[0] - this.state.marioLocation\n    );\n    let marioRange = this.getMarioRange();\n    if (\n      distance < this.props.width\n      && enemyLocations[0] < this.state.marioLocation\n      && this.numberInRange(enemyLocations[0], marioRange)\n    ) {\n      this.moveX('-');\n    } else if (\n      distance < this.props.width\n      && enemyLocations[0] < this.state.marioLocation\n      && !this.numberInRange(enemyLocations[0], marioRange)\n    ) {\n      this.moveY('+');\n    } else if (\n      distance < this.props.width\n      && enemyLocations[0] > this.state.marioLocation\n      && this.numberInRange(enemyLocations[0], marioRange)\n    ) {\n      this.moveX('+');\n    } else if (\n      distance < this.props.width\n      && enemyLocations[0] > this.state.marioLocation\n      && !this.numberInRange(enemyLocations[0], marioRange)\n    ) {\n      this.moveY('-');\n    } else if (\n      distance >= this.props.width\n      && enemyLocations[0] < this.state.marioLocation\n    ) {\n      this.moveY('+');\n    } else {\n      this.moveY('-');\n    }\n  }\n\n  checkForEnemies() {\n    let enemies = this.state.squares.filter(square => {\n      return square.element === 'enemy1.png';\n    });\n    if (enemies.length === 0) {\n      alert('Game over. Total moves to save princess: ' + this.state.moves);\n    } else {\n      this.decideMove(enemies.map((enemy) => enemy.value));\n    }\n  }\n\n  renderSquare(i) {\n    return <Square key={i}\n                   value={i} element={this.state.squares[i].element} displayElement={this.state.squares[i].display}\n                   onClick={() => this.handleClick(i)}\n    />;\n  }\n\n  renderRows = (squares) => (<div className=\"board-row\">{squares}</div>);\n\n  renderBoard() {\n    let board = [];\n    let rows = [];\n    for (let i = 0, squareNumber = 0; i < this.props.height; i++) {\n      for (let j = 0; j < this.props.width; j++) {\n        rows.push(\n          this.renderSquare(\n            squareNumber\n          )\n        );\n        squareNumber++;\n      }\n      board.push(this.renderRows(rows));\n      rows = [];\n    }\n    return board;\n  }\n\n  render() {\n    if (!this.state.gameInitialized) {\n      let luckySquares = [];\n      for (let i = 0; i < Math.floor(Math.sqrt(this.totalSquares)) + 1; i++) {\n        luckySquares.push(\n          Math.floor(Math.random() * (this.totalSquares))\n        );\n      };\n\n      let squareNumber = 0;\n      for (let i = 0; i < this.props.height; i++) {\n        for (let j = 0; j < this.props.width; j++) {\n          let element = squareNumber === this.state.marioLocation ? \"mario1.png\" : luckySquares.includes(squareNumber) ? \"enemy1.png\" : \"\";\n          let display = luckySquares.includes(squareNumber) || squareNumber === this.state.marioLocation ? \"block\" : \"none\";\n          this.state.squares.push({ element, display, value: squareNumber });\n          squareNumber++;\n        }\n      }\n    }\n    return (\n      <div>\n        {this.renderBoard()}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Board from \"./board\";\n\nexport default class Game extends React.Component {\n  validateInput = (input, dimension) => {\n    let output;\n    output = parseInt(input);\n    if (Number.isNaN(output)) {\n      return {\n        valid: false,\n        msg: `${input} not valid. \n        Please enter a valid integer for ${dimension}`\n      };\n    } else if (output < 0) {\n      return {\n        valid: false,\n        msg: `${input} not valid. \n          Please enter a positive integer for ${dimension}`\n      };\n    } else {\n      return {\n        valid: true,\n        output\n      };\n    }\n\n  }\n  render() {\n    let width = this.validateInput(\n      prompt(\"Please enter board width\"),\n      'width'\n    );\n    while (!width.valid) {\n      width = this.validateInput(prompt(width.msg), 'width');\n    }\n\n    let height = this.validateInput(\n      prompt(\"Please enter board height\"),\n      'height'\n    );\n    while (!height.valid) {\n      height = this.validateInput(prompt(height.msg), 'height');\n    }\n\n    if (width.output < height.output) {\n      let container = width.output;\n      width.output = height.output;\n      height.output = container;\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board width={width.output} height={height.output} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Game from \"./components/game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}